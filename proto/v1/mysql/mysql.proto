syntax = 'proto3';

package beget.cloud.v1.mysql;
import "google/api/annotations.proto";
import "cloud/proto/v1/structures.proto";

// Управление MySQL
//
// Предоставляет набор методов для работы с базами данных, доступами и параметрами МySQL.
service MysqlService {
    // Получить параметры MySQL
    //
    // Возвращает список текущих параметров MySQL.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    rpc getConfig(GetConfigRequest) returns (GetConfigResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/mysql/{service_id}/config",
        };
    }

    // Изменить параметры MySQL
    //
    // Меняет параметры MySQL на заданные.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    rpc setConfig(SetConfigRequest) returns (SetConfigResponse) {
        option (google.api.http) = {
            put: "/v1/cloud/mysql/{service_id}/config",
            body: "*"
        };
    }

    // Получить список баз данных
    //
    // Возвращает список баз данных в MySQL.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    rpc getDbList(GetDbListRequest) returns (GetDbListResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/mysql/{service_id}/db",
        };
    }

    // Создать базу данных
    //
    // Создает новую базу данных в MySQL.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    rpc createDb(CreateDbRequest) returns (CreateDbResponse) {
        option (google.api.http) = {
            post: "/v1/cloud/mysql/{service_id}/db",
            body: "*"
        };
    }

    // Удалить базу данных
    //
    // Удаляет указанную базу данных из MySQL со всеми хранящимися в ней данными.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    //
    // Для получения доступных имён баз данных `db_name` необходимо использовать метод
    // "Получить список баз данных" из API "Управляемые сервисы".
    rpc removeDb(RemoveDbRequest) returns (RemoveDbResponse) {
        option (google.api.http) = {
            delete: "/v1/cloud/mysql/{service_id}/db/{db_name}",
        };
    }

    // Создать доступ для базы данных
    //
    // Создает отдельный доступ для базы данных.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    //
    // Для получения доступных имён баз данных `db_name` необходимо использовать метод
    // "Получить список баз данных" из API "Управляемые сервисы".
    rpc createAccess(CreateAccessRequest) returns (CreateAccessResponse) {
        option (google.api.http) = {
            post: "/v1/cloud/mysql/{service_id}/db/{db_name}/access",
            body: "*"
        };
    }

    // Удалить доступ базы данных
    //
    // Удаляет указанный отдельный доступ для базы данных.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    //
    // Для получения доступных имён баз данных `db_name` и хостов `host` необходимо использовать метод
    // "Получить список баз данных" из API "Управляемые сервисы".
    rpc removeAccess(RemoveAccessRequest) returns (RemoveAccessResponse) {
        option (google.api.http) = {
            delete: "/v1/cloud/mysql/{service_id}/db/{db_name}/access/{host}",
        };
    }

    // Изменить пароль для доступа
    //
    // Изменяет пароль для указанного доступа к базе данных.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    //
    // Для получения доступных имён баз данных `db_name` и хостов `host` необходимо использовать метод
    // "Получить список баз данных" из API "Управляемые сервисы".
    rpc changeAccessPassword(ChangeAccessPasswordRequest) returns (ChangeAccessPasswordResponse) {
        option (google.api.http) = {
            patch: "/v1/cloud/mysql/{service_id}/db/{db_name}/access/{host}",
            body: "*"
        };
    }

    // Обновить описание базы данных
    //
    // Изменяет описание базы данных.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    //
    // Для получения доступных имён баз данных `db_name` необходимо использовать метод
    // "Получить список баз данных" из API "Управляемые сервисы".
    rpc updateDb(UpdateDbRequest) returns (UpdateDbResponse){
        option (google.api.http) = {
            patch: "/v1/cloud/mysql/{service_id}/db/{db_name}",
            body: "*"
        };
    }
}

message GetConfigRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message GetConfigResponse {
    // Параметры базы данных
    beget.cloud.v1.mysql.Config config = 1;
}

message SetConfigRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Список параметров для конфигурации базы данных (my.cnf)
    map<string, string> param = 2;

    // Тип конфигурации базы данных default/custom (необязательное поле)
    string preset_name = 3;
}

message SetConfigResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о текущей конфигурации базы данных
        beget.cloud.v1.mysql.Config config = 1;

        // Результат запроса: ошибка при изменении конфигурации базы данных
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректные параметры конфигурации
            INVALID_CONFIG_PARAMS = 3;
        }
    }
}

message GetDbListRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message GetDbListResponse {
    // Информация о базах данных
    repeated beget.cloud.v1.mysql.Db db = 1;
}

message CreateDbRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Название базы данных
    string db_name = 2;

    // Пароль для доступа localhost
    string password = 3;

    // Сохранить пароль для доступа из PhpMyAdmin
    bool save_pma_password = 4;

    // Описание базы данных (необязательное поле)
    string description = 5;
}

message CreateDbResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о базе данных
        beget.cloud.v1.mysql.Db db = 1;

        // Результат запроса: ошибка при создании базы данных
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректное имя базы данных
            INVALID_DB_NAME = 3;

            // База данных с таким именем уже существует
            DB_ALREADY_EXISTS = 4;

            // Некорректный пароль
            INVALID_ACCESS_PASSWORD = 5;

            // Некорректное описание базы данных
            INVALID_DESCRIPTION = 6;

            // Словарный пароль (находится в черном списке)
            BLACKLISTED_ACCESS_PASSWORD = 7;
        }
    }
}

message RemoveDbRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя базы данных
    string db_name = 2;
}

message RemoveDbResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: успешное удаление базы данных
        Success success = 1;

        // Результат запроса: ошибка при удалении базы данных
        Error error = 2;
    }

    message Success {
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;
        }
    }
}

message CreateAccessRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя базы данных
    string db_name = 2;

    // Хост, для которого создается доступ (ip/domain)
    string host = 3;

    // Пароль
    string password = 4;

    // Сохранить пароль для доступа из PhpMyAdmin
    bool save_pma_password = 5;
}

message CreateAccessResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о доступе к базе данных
        beget.cloud.v1.mysql.Db.Access access = 1;

        // Результат запроса: ошибка при создании доступа к базе данных
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректное имя хоста
            INVALID_ACCESS_HOST = 3;

            // Некорректный пароль
            INVALID_ACCESS_PASSWORD = 4;

            // Создаваемый доступ уже существует
            ACCESS_ALREADY_EXISTS = 5;

            // Словарный пароль (находится в черном списке)
            BLACKLISTED_ACCESS_PASSWORD = 6;
        }
    }
}

message RemoveAccessRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя базы данных
    string db_name = 2;

    // Хост (ip/domain)
    string host = 3;
}

message RemoveAccessResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: успешное удаления доступа базы данных
        Success success = 1;

        // Результат запроса: ошибка удаления доступа базы данных
        Error error = 2;
    }

    message Success {
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;
        }
    }
}

message ChangeAccessPasswordRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя базы данных
    string db_name = 2;

    // Хост (ip/domain)
    string host = 3;

    // Пароль
    string password = 4;

    // Сохранить пароль для доступа из PhpMyAdmin
    bool save_pma_password = 5;
}

message ChangeAccessPasswordResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о доступе к базе данных
        beget.cloud.v1.mysql.Db.Access access = 1;

        // Результат запроса: ошибка изменения доступа к базе данных
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Некорректный пароль
            INVALID_ACCESS_PASSWORD = 3;

            // Словарный пароль (находится в черном списке)
            BLACKLISTED_ACCESS_PASSWORD = 4;
        }
    }
}

message UpdateDbRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Имя базы данных
    string db_name = 2;

    // Описание базы данных
    string description = 3;
}

message UpdateDbResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о базе данных
        beget.cloud.v1.mysql.Db db = 1;

        // Результат запроса: ошибка изменения информации о базе данных
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректное описание
            INVALID_DESCRIPTION = 2;
        }
    }
}

message Mysql5 {
    // Конфигурация базы данных
    Mysql5Configuration configuration = 1;

    // Хост для подключения к базе данных
    string host = 2;

    // Порт для подключения к базе данных
    uint32 port = 3;

    // Адреса для доступа к управляемому сервису
    structures.AddressInfo address_info = 4;

    // Адрес PhpMyAdmin
    string pma_url = 5;

    // Размер использованного места на диске в байтах
    uint64 disk_used = 6;

    // Размер доступного места на диске в байтах
    uint64 disk_left = 7;

    // Включен ли режим "только для чтения"
    bool read_only = 8;

    // PhpMyAdmin в процессе установки
    bool pma_installing = 9;
}

message Mysql8 {
    // Конфигурация базы данных
    Mysql8Configuration configuration = 1;

    // Хост для подключения к базе данных
    string host = 2;

    // Порт для подключения к базе данных
    uint32 port = 3;

    // Адреса для доступа к управляемому сервису
    structures.AddressInfo address_info = 4;

    // Адрес PhpMyAdmin
    string pma_url = 5;

    // Размер использованного места на диске в байтах
    uint64 disk_used = 6;

    // Размер доступного места на диске в байтах
    uint64 disk_left = 7;

    // Включен ли режим "только для чтения"
    bool read_only = 8;

    // PhpMyAdmin в процессе установки
    bool pma_installing = 9;
}

message CreateParams {
    // Имя базы данных
    string db_name = 1;

    // Пароль для доступа к базе данных
    string access_password = 2;

    // Список параметров для конфигурации базы данных (my.cnf) (необязательное поле)
    map<string, string> param = 3;

    // Тип конфигурации базы данных (default/custom) (необязательное поле)
    string preset_name = 4;

    // Сохранить пароль для доступа из PhpMyAdmin
    bool save_pma_password = 5;
}

message CreateError {
    // Описание ошибки
    string message = 1;

    // Код ошибки
    Code code = 2;

    enum Code {
        // Зарезервированный код ошибки
        _ = 0;

        // Недостаточно средств для создания сервиса
        INSUFFICIENT_FUNDS = 1;

        // Неизвестная конфигурация
        CONFIGURATION_NOT_FOUND = 2;

        // Некорректное название сервиса
        INVALID_DISPLAY_NAME = 3;

        // Некорректное описание
        INVALID_DESCRIPTION = 4;

        // Некорректное имя базы данных
        INVALID_DB_NAME = 5;

        // Некорректный пароль
        INVALID_ACCESS_PASSWORD = 6;

        // Создание временно недоступно
        TEMPORARILY_UNAVAILABLE = 7;

        // Создание недоступно
        SERVICE_DISABLED = 8;

        // Словарный пароль (пароль находится в черном списке)
        BLACKLISTED_ACCESS_PASSWORD = 9;

        // Некорректные параметры конфигурации
        INVALID_CONFIG_PARAMS = 10;
    }
}

message Mysql5Configuration {
    // Количество ядер процессора
    uint32 cpu_count = 1;

    // Размер диска в MB
    uint32 disk_size = 2;

    // Размер памяти в MB
    uint32 memory = 3;

    // Версия MySQL
    string version = 4;

    // Отображаемая версия MySQL
    string display_version = 5;
}

message Mysql8Configuration {
    // Количество ядер процессора
    uint32 cpu_count = 1;

    // Размер диска в MB
    uint32 disk_size = 2;

    // Размер памяти в MB
    uint32 memory = 3;

    // Версия MySQL
    string version = 4;

    // Отображаемая версия MySQL
    string display_version = 5;
}

message Db {
    // Имя базы данных
    string name = 1;

    // Размер базы данных в байтах
    uint64 size = 2;

    // Список доступов к базе данных
    repeated Access access = 3;

    // Был ли сохранен пароль для доступа из PhpMyAdmin
    bool pma_password_saved = 4;

    // Описание базы данных
    string description = 5;

    message Access {
        // Хост для доступа к базе данных (ip/domain)
        string host = 1;

        // Пароль для доступа к базе данных
        string password = 2;
    }
}

message Config {
    // Список параметров для конфигурации базы данных (my.cnf)
    map<string, string> param = 1;

    // Тип конфигурации базы данных default/custom
    string preset_name = 3;
}
