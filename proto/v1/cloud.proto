syntax = 'proto3';

package beget.cloud.v1.cloud;
import "google/api/annotations.proto";
import "cloud/proto/v1/mysql.proto";
import "cloud/proto/v1/postgresql.proto";
// do not use structures.proto here for avoid recursive import

// Управление сервисами
//
// Предоставляет набор методов, общий для всех управляемых сервисов, таких как: создание сервиса,
// получение информации о сервисе, удаление сервиса и другие.
service CloudService {
    // Получить список доступных конфигураций
    //
    // Отдаёт список доступных конфигураций всех доступных управляемых сервисов. Данные о конфигурации содержат
    // в себе как информацию о стоимости услуги, так и объёме доступных ресурсов (например, дискового места и RAM).
    rpc getConfigurationList(GetConfigurationListRequest) returns (GetConfigurationListResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/configuration"
        };
    }

    // Создать управляемый сервис
    //
    // Создаёт выбранный управляемый сервис.
    //
    // Для получения доступных идентификаторов конфигурации `configuration_id` необходимо использовать метод
    // "Получить список доступных конфигураций" из API "Управляемые сервисы".
    rpc create(CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v1/cloud",
            body: "*"
        };
    }

    // Получить информацию о сервисе
    //
    // Отдаёт информацию об управляемом сервисе. Информацию включает в себя как общие для всех сервисов данные,
    // такие как имя, идентификатор конфигурации, статус, так и данные относящиеся к конкретному сервису.
    //
    // Для получения всех доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    rpc get(GetRequest) returns (GetResponse) {
        option (google.api.http) = {
            get: "/v1/cloud/{service_id}"
        };
    }

    // Получить информацию о сервисах
    //
    // Отдаёт информацию по всем управляемым сервисам на текущем аккаунте. Набор данных по каждому сервису совпадает
    // с данными, возвращаемыми методом "Получить информацию о сервисе" из API "Управляемые сервисы".
    rpc getList(GetListRequest) returns (GetListResponse) {
        option (google.api.http) = {
            get: "/v1/cloud"
        };
    }

    // Изменить информацию о сервисе
    //
    // Позволяет обновить редактируемые свойства управляемого сервиса, такие как имя и описание. Для смены конфигурации
    // и других операций, затрагивающих состояние сервиса, необходимо использовать соответствующие отдельные методы, например,
    // "Изменить конфигурацию сервиса" из API "Управляемые сервисы".
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    rpc update(UpdateRequest) returns (UpdateResponse){
        option (google.api.http) = {
            patch: "/v1/cloud/{service_id}",
            body: "*"
        };
    }

    // Удалить сервис
    //
    // Безвозвратно удаляет выбранный сервис и все данные, относящиеся к нему.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    rpc remove(RemoveRequest) returns (RemoveResponse) {
        option (google.api.http) = {
            delete: "/v1/cloud/{service_id}"
        };
    }

    // Изменить конфигурацию сервиса
    //
    // Меняет конфигурацию сервиса на выбранную.
    //
    // Для получения доступных идентификаторов сервисов `service_id` необходимо использовать метод
    // "Получить информацию о сервисах" из API "Управляемые сервисы".
    //
    // Для получения доступных идентификаторов конфигурации `configuration_id` необходимо
    // использовать метод "Получить список доступных конфигураций" из API "Управляемые сервисы".
    rpc changeConfiguration(ChangeConfigurationRequest) returns (ChangeConfigurationResponse) {
        option (google.api.http) = {
            patch: "/v1/cloud/{service_id}/configuration",
            body: "*"
        };
    }
}

message GetConfigurationListRequest {
}

message GetConfigurationListResponse {
    // Список доступных конфигураций
    repeated ServiceConfiguration configuration = 1;
}

message CreateRequest {
    // Идентификатор конфигурации
    string configuration_id = 1;

    // Название создаваемого сервиса
    string display_name = 2;

    // Описание сервиса (необязательное поле)
    string description = 3;

    // Дополнительные параметры создаваемого сервиса
    oneof params {
        // Дополнительные параметры создаваемого сервиса: управляемая БД MySQL
        beget.cloud.v1.mysql.CreateParams mysql_params = 4;
        // Дополнительные параметры создаваемого сервиса: управляемая БД PostgreSQL
        beget.cloud.v1.postgresql.CreateParams postgresql_params = 6;
    }

    // Зарезервированное поле, должно быть пустым
    string extra = 5;
}

message CreateResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о созданном сервисе
        Service service = 1;

        // Результат запроса: ошибка при создании MySQL
        beget.cloud.v1.mysql.CreateError mysql_error = 2;

        // Результат запроса: ошибка при создании PostgreSQL
        beget.cloud.v1.postgresql.CreateError postgresql_error = 3;
    }
}

message GetRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message GetResponse {
    // Информация о сервисе
    Service service = 1;
}

message GetListRequest {
}

message GetListResponse {
    // Информация о сервисах
    repeated Service service = 1;
}

message UpdateRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Название сервиса
    string display_name = 2;

    // Описание сервиса
    string description = 3;
}

message UpdateResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о сервисе
        Service service = 1;

        // Результат запроса: ошибка при обновлении информации о сервисе
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Невалидное название сервиса
            INVALID_DISPLAY_NAME = 1;

            // Невалидное описание сервиса
            INVALID_DESCRIPTION = 2;
        }
    }
}

message RemoveRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;
}

message RemoveResponse {
    // Успешное удаление сервиса
    Success success = 1;

    message Success {
    }
}

message ChangeConfigurationRequest {
    // Идентификатор сервиса в формате uuid v4
    string service_id = 1;

    // Идентификатор новой конфигурации
    string configuration_id = 2;
}

message ChangeConfigurationResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о сервисе
        Service service = 1;

        // Результат запроса: ошибка при изменении конфигурации сервиса
        Error error = 2;
    }

    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Зарезервированный код ошибки
            _ = 0;

            // Некорректный статус ресурса (отличный от running/stopped)
            INVALID_STATE = 1;

            // Доступ к сервису заблокирован
            SERVICE_DISABLED = 2;

            // Переданная конфигурация не может быть применена из-за ограничений (например, в ней меньше ресурсов, чем в текущей)
            INVALID_CONFIGURATION = 3;

            // Недостаточно денег для смены конфигурации
            INSUFFICIENT_FUNDS = 4;
        }
    }
}

// Информация о сервисе
message Service {
    // Идентификатор сервиса в формате uuid v4
    string id = 1;

    // Идентификатор конфигурации
    string configuration_id = 2;

    // Название сервиса
    string display_name = 3;

    // Описание сервиса
    string description = 4;

    // Статус сервиса
    Status status = 5;

    // Дата создания сервиса в формате W3C
    string created_at = 6;

    // Стоимость сервиса за один день в рублях
    double price_day = 7;

    // Стоимость сервиса за один месяц в рублях
    double price_month = 8;

    // Информация о конкретном сервисе
    oneof entity {
        // Информация о конкретном сервисе: управляемая БД MySQL 5
        mysql.Mysql5 mysql5 = 9;

        // Информация о конкретном сервисе: управляемая БД MySQL 8
        mysql.Mysql8 mysql8 = 10;

        // Информация о конкретном сервисе: управляемая БД PostgreSQL 15
        postgresql.Postgresql15 postgresql15 = 16;
    }

    // Заблокирован ли сервис
    bool manage_enabled = 11;

    // Имя сервиса для отображения в URL
    string slug = 12;

    // Идентификаторы сервисов для включения мониторинга
    repeated string monitorable_resources = 13;

    // Сервис находится в состоянии разблокировки
    bool unblocking = 14;

    // Сервис находится в состоянии миграции на другой хост
    bool migrating = 15;

    enum Status {
        // Создается
        CREATING = 0;

        // Запущен
        RUNNING = 1;

        // Перезагрузка
        RESTARTING = 2;

        // Остановлен
        STOPPED = 3;

        // Смена конфигурации
        RECONFIGURING = 4;
    }
}

message ServiceConfiguration {
    // Идентификатор конфигурации
    string id = 1;

    // Стоимость за один день в рублях
    double price_day = 2;

    // Стоимость за один месяц в рублях
    double price_month = 3;

    // Параметры конфигурации сервиса
    oneof configuration {
        //Параметры конфигурации сервиса: управляемая БД MySQL 5
        beget.cloud.v1.mysql.Mysql5Configuration mysql5 = 4;

        // Параметры конфигурации сервиса: управляемая БД MySQL 8
        beget.cloud.v1.mysql.Mysql8Configuration mysql8 = 5;

        // Параметры конфигурации сервиса: управляемая БД PostgreSQL 15
        beget.cloud.v1.postgresql.Postgresql15Configuration postgresql15 = 6;
    }
}
